{"ast":null,"code":"import { put, takeLatest, all } from 'redux-saga/effects';\nimport { findPaths } from './../lib/flightManager';\nimport { transformFlightDates } from './../lib/utils';\n\nfunction* fetchFlights() {\n  try {\n    const json = yield fetch('https://my-json-server.typicode.com/mneema/mock-db/flights').then(response => response.json());\n    yield put({\n      type: \"GET_FLIGHTS_SUCCESS\",\n      json: transformFlightDates(json)\n    });\n  } catch (e) {\n    console.log('error', e);\n    yield put({\n      type: \"GET_FLIGHTS_FAIL\",\n      error: e\n    });\n  }\n}\n\nfunction* findFlights(payload) {\n  try {\n    yield put({\n      type: \"GET_FILTERS_SUCCESS\",\n      json: payload.payload.criteria\n    });\n    const _payload$payload = payload.payload,\n          flights = _payload$payload.flights,\n          _payload$payload$crit = _payload$payload.criteria,\n          returnDate = _payload$payload$crit.returnDate,\n          origin = _payload$payload$crit.origin,\n          destination = _payload$payload$crit.destination,\n          departureDate = _payload$payload$crit.departureDate,\n          numOfPassengers = _payload$payload$crit.numOfPassengers;\n    const listOfFlights = {};\n\n    if (returnDate) {\n      listOfFlights.return = findPaths({\n        flights,\n        criteria: {\n          origin: destination,\n          destination: origin,\n          date: returnDate,\n          numOfPassengers\n        }\n      });\n    }\n\n    listOfFlights.onwards = findPaths({\n      flights,\n      criteria: {\n        origin,\n        destination,\n        date: departureDate,\n        numOfPassengers\n      }\n    });\n    yield put({\n      type: \"GET_ROUTES_SUCCESS\",\n      json: listOfFlights\n    });\n  } catch (e) {\n    console.log('error', e);\n    yield put({\n      type: \"GET_ROUTES_FAIL\",\n      error: e\n    });\n  }\n}\n\nfunction* flightsWatcher() {\n  yield takeLatest('GET_FLIGHTS', fetchFlights);\n}\n\nfunction* findFlightsWatcher() {\n  yield takeLatest('GET_ROUTES', findFlights);\n}\n\nexport default function* rootSaga() {\n  yield all([flightsWatcher(), findFlightsWatcher()]);\n}","map":{"version":3,"sources":["C:\\Users\\HP\\Desktop\\Flightbooking\\React-flight-booking-master\\src\\sagas\\index.js"],"names":["put","takeLatest","all","findPaths","transformFlightDates","fetchFlights","json","fetch","then","response","type","e","console","log","error","findFlights","payload","criteria","flights","returnDate","origin","destination","departureDate","numOfPassengers","listOfFlights","return","date","onwards","flightsWatcher","findFlightsWatcher","rootSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,UAAd,EAA0BC,GAA1B,QAAqC,oBAArC;AACA,SAASC,SAAT,QAA0B,wBAA1B;AACA,SAASC,oBAAT,QAAqC,gBAArC;;AAEA,UAAUC,YAAV,GAAyB;AACvB,MAAI;AACF,UAAMC,IAAI,GAAG,MAAMC,KAAK,CAAC,4DAAD,CAAL,CAChBC,IADgB,CACXC,QAAQ,IAAIA,QAAQ,CAACH,IAAT,EADD,CAAnB;AAEA,UAAMN,GAAG,CAAC;AAAEU,MAAAA,IAAI,EAAE,qBAAR;AAA+BJ,MAAAA,IAAI,EAAEF,oBAAoB,CAACE,IAAD;AAAzD,KAAD,CAAT;AACD,GAJD,CAIE,OAAOK,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,CAArB;AACA,UAAMX,GAAG,CAAC;AAAEU,MAAAA,IAAI,EAAE,kBAAR;AAA4BI,MAAAA,KAAK,EAAEH;AAAnC,KAAD,CAAT;AACD;AAEF;;AAED,UAAUI,WAAV,CAAsBC,OAAtB,EAA+B;AAC7B,MAAI;AACF,UAAMhB,GAAG,CAAC;AAAEU,MAAAA,IAAI,EAAE,qBAAR;AAA+BJ,MAAAA,IAAI,EAAEU,OAAO,CAACA,OAAR,CAAgBC;AAArD,KAAD,CAAT;AADE,6BAGiGD,OAAO,CAACA,OAHzG;AAAA,UAGME,OAHN,oBAGMA,OAHN;AAAA,mDAGeD,QAHf;AAAA,UAG2BE,UAH3B,yBAG2BA,UAH3B;AAAA,UAGuCC,MAHvC,yBAGuCA,MAHvC;AAAA,UAG+CC,WAH/C,yBAG+CA,WAH/C;AAAA,UAG4DC,aAH5D,yBAG4DA,aAH5D;AAAA,UAG2EC,eAH3E,yBAG2EA,eAH3E;AAIF,UAAMC,aAAa,GAAG,EAAtB;;AAEA,QAAIL,UAAJ,EAAgB;AACdK,MAAAA,aAAa,CAACC,MAAd,GAAuBtB,SAAS,CAAC;AAAEe,QAAAA,OAAF;AAAWD,QAAAA,QAAQ,EAAE;AAAEG,UAAAA,MAAM,EAAEC,WAAV;AAAuBA,UAAAA,WAAW,EAAED,MAApC;AAA4CM,UAAAA,IAAI,EAAEP,UAAlD;AAA8DI,UAAAA;AAA9D;AAArB,OAAD,CAAhC;AACD;;AAEDC,IAAAA,aAAa,CAACG,OAAd,GAAwBxB,SAAS,CAAC;AAAEe,MAAAA,OAAF;AAAWD,MAAAA,QAAQ,EAAE;AAAEG,QAAAA,MAAF;AAAUC,QAAAA,WAAV;AAAuBK,QAAAA,IAAI,EAAEJ,aAA7B;AAA4CC,QAAAA;AAA5C;AAArB,KAAD,CAAjC;AAEA,UAAMvB,GAAG,CAAC;AAAEU,MAAAA,IAAI,EAAE,oBAAR;AAA8BJ,MAAAA,IAAI,EAAEkB;AAApC,KAAD,CAAT;AACD,GAbD,CAaE,OAAOb,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,CAArB;AACA,UAAMX,GAAG,CAAC;AAAEU,MAAAA,IAAI,EAAE,iBAAR;AAA2BI,MAAAA,KAAK,EAAEH;AAAlC,KAAD,CAAT;AACD;AAEF;;AAED,UAAUiB,cAAV,GAA2B;AACzB,QAAM3B,UAAU,CAAC,aAAD,EAAgBI,YAAhB,CAAhB;AACD;;AAED,UAAUwB,kBAAV,GAA+B;AAC7B,QAAM5B,UAAU,CAAC,YAAD,EAAec,WAAf,CAAhB;AACD;;AAED,eAAe,UAAUe,QAAV,GAAqB;AAClC,QAAM5B,GAAG,CAAC,CACR0B,cAAc,EADN,EAERC,kBAAkB,EAFV,CAAD,CAAT;AAID","sourcesContent":["import { put, takeLatest, all } from 'redux-saga/effects';\nimport { findPaths } from './../lib/flightManager';\nimport { transformFlightDates } from './../lib/utils';\n\nfunction* fetchFlights() {\n  try {\n    const json = yield fetch('https://my-json-server.typicode.com/mneema/mock-db/flights')\n      .then(response => response.json());\n    yield put({ type: \"GET_FLIGHTS_SUCCESS\", json: transformFlightDates(json) });\n  } catch (e) {\n    console.log('error', e);\n    yield put({ type: \"GET_FLIGHTS_FAIL\", error: e });\n  }\n\n}\n\nfunction* findFlights(payload) {\n  try {\n    yield put({ type: \"GET_FILTERS_SUCCESS\", json: payload.payload.criteria });\n    \n    const { flights, criteria: { returnDate, origin, destination, departureDate, numOfPassengers } } = payload.payload;\n    const listOfFlights = {};\n    \n    if (returnDate) {\n      listOfFlights.return = findPaths({ flights, criteria: { origin: destination, destination: origin, date: returnDate, numOfPassengers } })\n    }\n\n    listOfFlights.onwards = findPaths({ flights, criteria: { origin, destination, date: departureDate, numOfPassengers } });\n    \n    yield put({ type: \"GET_ROUTES_SUCCESS\", json: listOfFlights });\n  } catch (e) {\n    console.log('error', e);\n    yield put({ type: \"GET_ROUTES_FAIL\", error: e });\n  }\n\n}\n\nfunction* flightsWatcher() {\n  yield takeLatest('GET_FLIGHTS', fetchFlights)\n}\n\nfunction* findFlightsWatcher() {\n  yield takeLatest('GET_ROUTES', findFlights)\n}\n\nexport default function* rootSaga() {\n  yield all([\n    flightsWatcher(),\n    findFlightsWatcher()\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}